"""
###############################################################################
ðŸ“¦ Estimatron 3.0 â€” MÃ³dulo: skill_mapper

Mapeia mÃ©tricas extraÃ­das do modelo UML para perfis profissionais tÃ©cnicos.
Aplica os custos por perfil informados via JSON e calcula distribuiÃ§Ã£o de esforÃ§o.

Autor: MOACYR + Copilot
###############################################################################
"""

from typing import Dict

def mapear_skills(metrica: Dict[str, int], custos_json: Dict[str, float]) -> Dict[str, Dict[str, float]]:
    """
    Distribui esforÃ§o estimado entre perfis profissionais com base nas mÃ©tricas e custos.

    ParÃ¢metros:
        metrica (dict): MÃ©tricas tÃ©cnicas do modelo UML.
        custos_json (dict): Tabela com custos por perfil (R$/hora).

    Retorna:
        dict: DistribuiÃ§Ã£o por skill contendo:
            - PM (float): Pessoa-mÃªs estimado por perfil
            - custo_total (float): Custo calculado com base na taxa/hora
    """
    # ðŸ“Š DistribuiÃ§Ã£o estÃ¡tica â€” pode ser parametrizada futuramente
    distribuicao = {
        "Analista de Requisitos": 0.2,
        "Arquiteto de Software": 0.2,
        "Desenvolvedor": 0.4,
        "Testador": 0.2
    }

    # ðŸ§® EsforÃ§o total simplificado (ajuste via COCOMO real)
    total_esforco = 52  # Pessoa-mÃªs

    resultado = {}
    for perfil, proporcao in distribuicao.items():
        pm = total_esforco * proporcao
        horas = pm * 160  # Assumindo 160h/mÃªs
        taxa = custos_json.get(perfil, 100)  # Valor padrÃ£o se ausente
        custo = horas * taxa

        resultado[perfil] = {
            "PM": round(pm, 2),
            "custo_total": round(custo, 2)
        }

    return resultado
